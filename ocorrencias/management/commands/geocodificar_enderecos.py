from django.core.management.base import BaseCommand
from ocorrencias.endereco_models import EnderecoOcorrencia # Importe seu model
import time
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'Geocodifica endere√ßos externos sem coordenadas'

    def add_arguments(self, parser):
        parser.add_argument(
            '--limite',
            type=int,
            default=None,
            help='Limitar n√∫mero de endere√ßos a processar (ex: --limite 5)'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Simular sem salvar no banco de dados'
        )

    def handle(self, *args, **options):
        limite = options.get('limite')
        dry_run = options.get('dry_run')
        
        # Buscar endere√ßos sem coordenadas (e que n√£o s√£o manuais)
        enderecos = EnderecoOcorrencia.objects.filter(
            tipo='EXTERNA',
            latitude__isnull=True,
            coordenadas_manuais=False, # Boa pr√°tica adicionar isso
            logradouro__isnull=False    # S√≥ busca se tiver o que buscar
        ).select_related('ocorrencia', 'ocorrencia__cidade').exclude(logradouro__exact='')
        
        if limite:
            enderecos = enderecos[:limite]
        
        # O .count() aqui √© mais eficiente
        total = enderecos.count()
        
        if total == 0:
            self.stdout.write(self.style.SUCCESS('\n‚úÖ Todos os endere√ßos j√° possuem coordenadas!\n'))
            return
        
        # Header
        self.stdout.write("\n" + "="*70)
        self.stdout.write(self.style.WARNING("üìç GEOCODIFICA√á√ÉO AUTOM√ÅTICA - RORAIMA"))
        self.stdout.write("="*70)
        self.stdout.write(f"üìä Encontrados {total} endere√ßos para geocodificar")
        
        if dry_run:
            self.stdout.write(self.style.WARNING("üîç MODO SIMULA√á√ÉO (n√£o vai salvar no banco)"))
        
        self.stdout.write("‚è≥ Iniciando processamento (aguarde, pode demorar)...")
        self.stdout.write("‚ö†Ô∏è  Respeita limite de 1 req/segundo do OpenStreetMap\n")
        
        sucesso = 0
        falha = 0
        
        for i, endereco in enumerate(enderecos, 1):
            self.stdout.write(f"\n[{i}/{total}] Processando ID {endereco.id}:")
            self.stdout.write(f"   Ocorr√™ncia: {endereco.ocorrencia.numero_ocorrencia}")
            self.stdout.write(f"   Endere√ßo: {endereco.logradouro or 'Sem logradouro'}")
            
            # ‚úÖ‚úÖ‚úÖ CORRE√á√ÉO APLICADA AQUI ‚úÖ‚úÖ‚úÖ
            # Seu m√©todo no models.py chama-se "geocodificar_async"
            resultado = endereco.geocodificar_async()
            
            if resultado:
                if not dry_run:
                    # O seu geocodificar_async() j√° salva! 
                    # N√£o precisamos salvar de novo.
                    sucesso += 1
                    self.stdout.write(self.style.SUCCESS(f"   ‚úÖ SALVO: {endereco.latitude}, {endereco.longitude}"))
                else:
                    # No dry-run, o geocodificar_async() n√£o salvar√° (ele √© esperto)
                    # Mas precisamos simular o que ele encontraria
                    sucesso += 1
                    # N√£o podemos ler lat/lng porque n√£o foi salvo
                    self.stdout.write(self.style.SUCCESS(f"   ‚úÖ ENCONTRADO (simulado)")) 
            else:
                falha += 1
                self.stdout.write(self.style.WARNING(f"   ‚ö†Ô∏è  N√ÉO ENCONTRADO"))
            
            # Respeitar rate limit do Nominatim (1 req/segundo)
            if i < total:
                self.stdout.write("   ‚è±Ô∏è  Aguardando 1.5s...")
                time.sleep(1.5)
        
        # Resumo final
        self.stdout.write("\n" + "="*70)
        self.stdout.write(self.style.SUCCESS("üìä RESUMO DA GEOCODIFICA√á√ÉO"))
        self.stdout.write("="*70)
        self.stdout.write(self.style.SUCCESS(f"‚úÖ Sucesso: {sucesso} endere√ßos"))
        self.stdout.write(self.style.WARNING(f"‚ö†Ô∏è  Falhas: {falha} endere√ßos"))
        self.stdout.write(f"üìä Total processado: {total}")
        
        if sucesso > 0 and total > 0: # Evitar divis√£o por zero
            percentual = (sucesso / total) * 100
            self.stdout.write(self.style.SUCCESS(f"üéØ Taxa de sucesso: {percentual:.1f}%"))
        
        if dry_run:
            self.stdout.write(self.style.WARNING("\n‚ö†Ô∏è  MODO SIMULA√á√ÉO: Nada foi salvo no banco de dados"))
        
        self.stdout.write("="*70 + "\n")
