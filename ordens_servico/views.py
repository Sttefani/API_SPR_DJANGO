# ordens_servico/views.py

from rest_framework import viewsets, status
from rest_framework.response import Response
from rest_framework.decorators import action
from django.utils import timezone
from django.db.models import Count, Q, Avg, F, ExpressionWrapper, fields
from django.db.models.functions import TruncDate
from datetime import timedelta

from .models import OrdemServico
from .serializers import (
    OrdemServicoSerializer,
    OrdemServicoLixeiraSerializer,
    CriarOrdemServicoComAssinaturaSerializer,
    TomarCienciaSerializer,
    ReiterarOrdemServicoSerializer,
    JustificarAtrasoSerializer
)
from .permissions import OrdemServicoPermission
from .filters import OrdemServicoFilter
from .pdf_generator import (
    gerar_pdf_ordem_servico,
    gerar_pdf_oficial_ordem_servico,
    gerar_pdf_listagem_ordens_servico
)
from ocorrencias.models import Ocorrencia


class OrdemServicoViewSet(viewsets.ModelViewSet):
    """
    ViewSet para gerenciar Ordens de Servi√ßo (m√≥dulo independente).
    
    Endpoints principais:
    - GET/POST   /api/ordens-servico/
    - GET/PATCH/DELETE  /api/ordens-servico/{id}/
    
    Query params √∫teis:
    - ?ocorrencia_id=1  ‚Üí Filtra OS de uma ocorr√™ncia espec√≠fica
    - ?vencida=true     ‚Üí Filtra apenas vencidas
    - ?sem_ciencia=true ‚Üí Filtra sem ci√™ncia
    
    Actions customizadas:
    - POST  /api/ordens-servico/{id}/tomar-ciencia/
    - POST  /api/ordens-servico/{id}/reiterar/
    - POST  /api/ordens-servico/{id}/iniciar-trabalho/
    - POST  /api/ordens-servico/{id}/justificar-atraso/
    - POST  /api/ordens-servico/{id}/concluir/
    - GET   /api/ordens-servico/{id}/pdf/
    - GET   /api/ordens-servico/{id}/pdf-oficial/
    - GET   /api/ordens-servico/listagem-pdf/?ocorrencia_id=1
    - GET   /api/ordens-servico/lixeira/
    - POST  /api/ordens-servico/{id}/restaurar/
    """
    
    queryset = OrdemServico.all_objects.select_related(
        'ocorrencia',
        'ocorrencia__perito_atribuido',
        'ocorrencia__servico_pericial',
        'created_by',
        'updated_by',
        'ordenada_por',
        'ciente_por',
        'concluida_por',
        'unidade_demandante',
        'autoridade_demandante',
        'procedimento',
        'tipo_documento_referencia',
        'os_original'
    ).prefetch_related('reiteracoes').all()
    
    permission_classes = [OrdemServicoPermission]
    filterset_class = OrdemServicoFilter

    def get_queryset(self):
        """
        Filtra o queryset com base no usu√°rio.
        Pode filtrar por ocorr√™ncia usando query param: ?ocorrencia_id=1
        """
        user = self.request.user
        queryset = self.queryset
        
        # Filtro opcional por ocorr√™ncia (via query param)
        ocorrencia_id = self.request.query_params.get('ocorrencia_id')
        if ocorrencia_id:
            queryset = queryset.filter(ocorrencia_id=ocorrencia_id)
        
        # Lixeira inclui deletados
        if self.action == 'lixeira':
            return queryset.filter(deleted_at__isnull=False)
        
        # Demais actions s√≥ mostram n√£o-deletados
        queryset = queryset.filter(deleted_at__isnull=True)
        
        # Super Admin e Admin veem todas as OS
        if user.is_superuser or user.perfil == 'ADMINISTRATIVO':
            return queryset
        
        # Perito v√™ apenas as OS de ocorr√™ncias que lhe foram atribu√≠das
        return queryset.filter(ocorrencia__perito_atribuido=user)

    def get_serializer_class(self):
        """Retorna o serializer correto para cada a√ß√£o"""
        if self.action == 'create':
            return CriarOrdemServicoComAssinaturaSerializer
        if self.action == 'tomar_ciencia':
            return TomarCienciaSerializer
        if self.action == 'reiterar':
            return ReiterarOrdemServicoSerializer
        if self.action == 'justificar_atraso':
            return JustificarAtrasoSerializer
        if self.action == 'lixeira':
            return OrdemServicoLixeiraSerializer
        
        return OrdemServicoSerializer
    
    def create(self, request, *args, **kwargs):
        """Cria uma nova Ordem de Servi√ßo com assinatura digital"""
        ocorrencia_id = request.data.get('ocorrencia_id')
        
        if not ocorrencia_id:
            return Response(
                {"error": "Campo 'ocorrencia_id' √© obrigat√≥rio."},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        try:
            ocorrencia = Ocorrencia.objects.select_related(
                'perito_atribuido',
                'unidade_demandante',
                'autoridade',
                'procedimento_cadastrado'
            ).get(pk=ocorrencia_id)
        except Ocorrencia.DoesNotExist:
            return Response(
                {"error": "Ocorr√™ncia n√£o encontrada."},
                status=status.HTTP_404_NOT_FOUND
            )
        
        # Valida√ß√µes de neg√≥cio
        if ocorrencia.status == Ocorrencia.Status.FINALIZADA:
            return Response(
                {
                    "error": "N√£o √© poss√≠vel emitir Ordem de Servi√ßo para esta ocorr√™ncia.",
                    "details": "A ocorr√™ncia est√° com status 'Finalizada'. Ordens de Servi√ßo s√≥ podem ser emitidas para ocorr√™ncias com status 'Aberta', 'Em Andamento' ou 'Aguardando Per√≠cia'.",
                    "action": "Se necess√°rio, altere o status da ocorr√™ncia antes de emitir a OS."
                },
                status=status.HTTP_400_BAD_REQUEST
            )
        
        if not ocorrencia.perito_atribuido:
            return Response(
                {
                    "error": "N√£o √© poss√≠vel emitir Ordem de Servi√ßo.",
                    "details": "A ocorr√™ncia precisa ter um perito atribu√≠do antes de emitir a OS.",
                    "action": "V√° em 'Editar Ocorr√™ncia', atribua um perito no campo 'Perito Atribu√≠do' e tente novamente."
                },
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Cria a OS com assinatura
        serializer = self.get_serializer(
            data=request.data,
            context={'request': request, 'ocorrencia': ocorrencia}
        )
        serializer.is_valid(raise_exception=True)
        ordem_servico = serializer.save()
        
        # Retorna com o serializer completo
        response_serializer = OrdemServicoSerializer(
            ordem_servico,
            context={'request': request}
        )
        
        return Response(
            {
                'message': f'Ordem de Servi√ßo {ordem_servico.numero_os} emitida com sucesso.',
                'ordem_servico': response_serializer.data
            },
            status=status.HTTP_201_CREATED
        )
    
    def retrieve(self, request, *args, **kwargs):
        """
        Retorna detalhes de uma OS.
        Registra visualiza√ß√£o automaticamente para o perito.
        """
        instance = self.get_object()
        
        # Registra visualiza√ß√£o se for o perito destinat√°rio
        if (instance.ocorrencia.perito_atribuido and
            request.user.id == instance.ocorrencia.perito_atribuido.id):
            instance.registrar_visualizacao()
        
        serializer = self.get_serializer(instance)
        return Response(serializer.data)
    
    def perform_update(self, serializer):
        """Registra quem atualizou"""
        serializer.save(updated_by=self.request.user)
    
    def destroy(self, request, *args, **kwargs):
        """Soft delete - s√≥ Super Admin pode deletar"""
        instance = self.get_object()
        instance.soft_delete(user=request.user)
        return Response(
            {'message': f'OS {instance.numero_os} movida para a lixeira.'},
            status=status.HTTP_204_NO_CONTENT
        )

    # =========================================================================
    # ACTIONS CUSTOMIZADAS
    # =========================================================================
    
    @action(detail=False, methods=['get'], url_path='pendentes-ciencia')
    def pendentes_ciencia(self, request):
        """
        Retorna a quantidade de OS aguardando ci√™ncia do perito logado
        """
        user = request.user
        
        print("=" * 80)
        print("üîç DEBUG PENDENTES-CIENCIA")
        print("=" * 80)
        print(f"üë§ Usu√°rio logado: {user.username} (ID: {user.id})")
        print(f"üìß Email: {user.email}")
        print(f"üëî Nome: {user.nome_completo}")
        print(f"üé≠ Perfil: {user.perfil}")
        print("-" * 80)
        
        # APENAS PERITOS veem o banner
        if user.perfil == 'ADMINISTRATIVO':
            print("‚ùå √â ADMINISTRATIVO - retornando count=0")
            return Response({'count': 0, 'ordens': []})
        
        print("‚úÖ √â PERITO - buscando OS aguardando ci√™ncia...")
        print("-" * 80)
        
        # BUSCA TODAS as OS com status AGUARDANDO_CIENCIA (sem filtro de perito)
        todas_os_aguardando = OrdemServico.objects.filter(
            status='AGUARDANDO_CIENCIA',
            deleted_at__isnull=True
        ).select_related('ocorrencia', 'ocorrencia__perito_atribuido')
        
        print(f"üìä TOTAL de OS aguardando ci√™ncia no sistema: {todas_os_aguardando.count()}")
        print("-" * 80)
        
        if todas_os_aguardando.exists():
            print("üìã LISTA DE TODAS AS OS AGUARDANDO CI√äNCIA:")
            for os in todas_os_aguardando:
                perito = os.ocorrencia.perito_atribuido
                if perito:
                    print(f"   ‚Ä¢ OS {os.numero_os}")
                    print(f"     - Perito: {perito.nome_completo} (ID: {perito.id})")
                    print(f"     - Ocorr√™ncia: {os.ocorrencia.numero_ocorrencia}")
                    print(f"     - Status: {os.status}")
                    print(f"     - Deleted: {os.deleted_at}")
                else:
                    print(f"   ‚Ä¢ OS {os.numero_os} - SEM PERITO ATRIBU√çDO!")
            print("-" * 80)
        else:
            print("‚ö†Ô∏è NENHUMA OS com status AGUARDANDO_CIENCIA encontrada!")
            print("-" * 80)
        
        # Busca OS aguardando ci√™ncia DO PERITO LOGADO
        ordens = OrdemServico.objects.filter(
            status='AGUARDANDO_CIENCIA',
            ocorrencia__perito_atribuido=user,
            deleted_at__isnull=True
        ).select_related('ocorrencia').order_by('-created_at')
        
        print(f"üéØ OS ATRIBU√çDAS AO USU√ÅRIO LOGADO: {ordens.count()}")
        
        if ordens.exists():
            print("‚úÖ ENCONTRADAS:")
            for os in ordens:
                print(f"   ‚Ä¢ {os.numero_os}")
        else:
            print("‚ùå NENHUMA OS encontrada para este perito!")
            print(f"   Verifique se o perito ID {user.id} est√° atribu√≠do nas OS listadas acima")
        
        print("=" * 80)
        
        # Serializa dados m√≠nimos
        dados = []
        for os in ordens:
            dados.append({
                'id': os.id,
                'numero_os': os.numero_os,
                'dias_desde_emissao': os.dias_desde_emissao,
                'created_at': os.created_at.isoformat()
            })
        
        return Response({
            'count': ordens.count(),
            'ordens': dados
        })
        
    @action(detail=True, methods=['post'], url_path='tomar-ciencia')
    def tomar_ciencia(self, request, pk=None, **kwargs):
        """Permite que o perito registre ci√™ncia da OS com assinatura digital"""
        ordem_servico = self.get_object()
        
        # Valida√ß√µes
        if request.user != ordem_servico.ocorrencia.perito_atribuido:
            return Response(
                {"error": "Apenas o perito atribu√≠do pode tomar ci√™ncia desta OS."},
                status=status.HTTP_403_FORBIDDEN
            )
        
        if ordem_servico.ciente_por:
            data_ciencia = ordem_servico.data_ciencia.strftime('%d/%m/%Y √†s %H:%M') if ordem_servico.data_ciencia else 'data desconhecida'
            return Response(
                {
                    "error": "Ci√™ncia j√° registrada para esta Ordem de Servi√ßo.",
                    "details": f"Voc√™ j√° registrou ci√™ncia em {data_ciencia}. N√£o √© necess√°rio tomar ci√™ncia novamente.",
                    "context": {
                        "data_ciencia": data_ciencia,
                        "status_atual": ordem_servico.get_status_display()
                    }
                },
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Valida senha
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        
        # Registra ci√™ncia
        ip_address = request.META.get('REMOTE_ADDR', '127.0.0.1')
        ordem_servico.tomar_ciencia(user=request.user, ip_address=ip_address)
        
        # Retorna resposta
        response_serializer = OrdemServicoSerializer(
            ordem_servico,
            context={'request': request}
        )
        
        return Response(
            {
                'message': f'Ci√™ncia registrada com sucesso para OS {
                    ordem_servico.numero_os}.',
                'ordem_servico': response_serializer.data
            },
            status=status.HTTP_200_OK
        )

    @action(detail=True, methods=['post'])
    def reiterar(self, request, pk=None, **kwargs):
        """
        Cria uma OS de reitera√ß√£o baseada na original/anterior.
        S√≥ ADMINISTRATIVO pode reiterar.
        """
        from django.core.exceptions import ValidationError
        
        os_anterior = self.get_object()
        
        # Valida assinatura
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        
        # Remove dados de assinatura
        validated_data = serializer.validated_data.copy()
        validated_data.pop('email')
        validated_data.pop('password')
        
        # ‚úÖ CORRE√á√ÉO: Captura ValidationError para retornar mensagem amig√°vel
        try:
            # Cria reitera√ß√£o
            ordenada_por = validated_data.get('ordenada_por_id')
            nova_os = os_anterior.reiterar(
                prazo_dias=validated_data['prazo_dias'],
                ordenada_por=ordenada_por,
                user=request.user,
                observacoes=validated_data.get('observacoes_administrativo', '')
            )
        except ValidationError as e:
            # Retorna erro 400 com a mensagem do ValidationError
            error_message = e.messages[0] if hasattr(e, 'messages') else str(e)
            return Response(
                {'error': error_message},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Retorna resposta de sucesso
        response_serializer = OrdemServicoSerializer(
            nova_os,
            context={'request': request}
        )
        
        return Response(
            {
                'message': f'Reitera√ß√£o {nova_os.numero_os} criada com sucesso.',
                'ordem_servico': response_serializer.data
            },
            status=status.HTTP_201_CREATED
        )

    @action(detail=True, methods=['post'], url_path='iniciar-trabalho')
    def iniciar_trabalho(self, request, pk=None, **kwargs):
        """Permite que o perito marque a OS como EM_ANDAMENTO"""
        ordem_servico = self.get_object()
        
        # Valida√ß√µes
        if request.user != ordem_servico.ocorrencia.perito_atribuido:
            return Response(
                {"error": "Apenas o perito atribu√≠do pode iniciar o trabalho."},
                status=status.HTTP_403_FORBIDDEN
            )
        
        if ordem_servico.status != OrdemServico.Status.ABERTA:
            status_atual = ordem_servico.get_status_display()
            
            # Mensagens espec√≠ficas por status
            if ordem_servico.status == OrdemServico.Status.AGUARDANDO_CIENCIA:
                detalhes = "Voc√™ precisa tomar ci√™ncia da Ordem de Servi√ßo antes de iniciar o trabalho."
                acao = "Clique em 'Tomar Ci√™ncia' primeiro, depois voc√™ poder√° iniciar o trabalho."
            elif ordem_servico.status == OrdemServico.Status.EM_ANDAMENTO:
                detalhes = "Esta ordem j√° est√° com o trabalho iniciado."
                acao = "N√£o √© necess√°rio iniciar novamente. Continue trabalhando na OS."
            elif ordem_servico.status == OrdemServico.Status.CONCLUIDA:
                detalhes = "Esta ordem j√° foi conclu√≠da."
                acao = "N√£o √© poss√≠vel iniciar trabalho em uma OS j√° conclu√≠da."
            else:
                detalhes = f"O status atual √© '{status_atual}'. Voc√™ s√≥ pode iniciar trabalho em ordens com status 'Aberta'."
                acao = "Verifique o status da ordem e o fluxo correto."
            
            return Response(
                {
                    "error": "N√£o √© poss√≠vel iniciar o trabalho nesta Ordem de Servi√ßo.",
                    "details": detalhes,
                    "action": acao,
                    "context": {
                        "status_atual": status_atual,
                        "status_esperado": "Aberta"
                    }
                },
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Inicia trabalho
        ordem_servico.iniciar_trabalho(user=request.user)
        
        # Retorna resposta
        serializer = self.get_serializer(ordem_servico)
        return Response(
            {
                'message': 'Trabalho iniciado com sucesso.',
                'ordem_servico': serializer.data
            },
            status=status.HTTP_200_OK
        )

    @action(detail=True, methods=['post'], url_path='justificar-atraso')
    def justificar_atraso(self, request, pk=None, **kwargs):
        """Permite que o perito justifique o atraso na entrega"""
        ordem_servico = self.get_object()
        
        # Valida√ß√µes
        if request.user != ordem_servico.ocorrencia.perito_atribuido:
            return Response(
                {"error": "Apenas o perito atribu√≠do pode justificar atraso."},
                status=status.HTTP_403_FORBIDDEN
            )
        
        if not ordem_servico.esta_vencida:
            # Melhora a mensagem com contexto de datas
            prazo_str = ordem_servico.data_prazo.strftime('%d/%m/%Y') if ordem_servico.data_prazo else 'N√£o definido'
            hoje_str = timezone.now().strftime('%d/%m/%Y')
            
            return Response(
                {
                    "error": "Esta Ordem de Servi√ßo n√£o est√° vencida.",
                    "details": "Voc√™ s√≥ pode justificar atraso em ordens que j√° passaram do prazo de entrega.",
                    "context": {
                        "prazo": prazo_str,
                        "hoje": hoje_str,
                        "status": ordem_servico.get_status_display()
                    }
                },
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Salva justificativa
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        
        ordem_servico.justificar_atraso(
            justificativa=serializer.validated_data['justificativa'],
            user=request.user
        )
        
        # Retorna resposta
        response_serializer = OrdemServicoSerializer(
            ordem_servico,
            context={'request': request}
        )
        
        return Response(
            {
                'message': 'Justificativa registrada com sucesso.',
                'ordem_servico': response_serializer.data
            },
            status=status.HTTP_200_OK
        )

    @action(detail=True, methods=['post'], url_path='concluir')
    def concluir(self, request, pk=None, **kwargs):
        """
        Marca a OS como conclu√≠da (d√° baixa).
        Apenas ADMINISTRATIVO pode concluir.
        
        Endpoint: POST /api/ordens-servico/{id}/concluir/
        
        Valida√ß√µes:
        - Apenas admin pode concluir
        - OS n√£o pode estar j√° conclu√≠da
        - Perito deve ter tomado ci√™ncia
        
        Retorna:
        - 200 OK: OS conclu√≠da com sucesso
        - 403 FORBIDDEN: Usu√°rio sem permiss√£o
        - 400 BAD_REQUEST: Valida√ß√£o de neg√≥cio falhou
        """
        ordem_servico = self.get_object()
        
        # ‚úÖ VALIDA√á√ÉO 1: Apenas administrativos
        if request.user.perfil not in ['ADMINISTRATIVO', 'SUPER_ADMIN']:
            return Response(
                {'error': 'Apenas administrativos podem concluir ordens de servi√ßo.'},
                status=status.HTTP_403_FORBIDDEN
            )
        
        # ‚úÖ VALIDA√á√ÉO 2: N√£o pode concluir OS j√° conclu√≠da
        if ordem_servico.status == OrdemServico.Status.CONCLUIDA:
            return Response(
                {'error': 'Esta ordem de servi√ßo j√° est√° conclu√≠da.'},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # ‚úÖ VALIDA√á√ÉO 3: Perito deve ter tomado ci√™ncia
        if ordem_servico.status == OrdemServico.Status.AGUARDANDO_CIENCIA:
            perito_nome = ordem_servico.ocorrencia.perito_atribuido.nome_completo if ordem_servico.ocorrencia.perito_atribuido else 'o perito'
            return Response(
                {
                    'error': 'N√£o √© poss√≠vel concluir esta Ordem de Servi√ßo.',
                    'details': f'{perito_nome} ainda n√£o tomou ci√™ncia da ordem.',
                    'action': 'Aguarde o perito tomar ci√™ncia ou entre em contato com ele antes de dar baixa na OS.',
                    'context': {
                        'os_numero': ordem_servico.numero_os,
                        'status_atual': 'Aguardando Ci√™ncia'
                    }
                },
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # ‚úÖ VALIDA√á√ÉO 4: Verificar se tem ci√™ncia (dupla checagem)
        if not ordem_servico.ciente_por:
            perito_nome = ordem_servico.ocorrencia.perito_atribuido.nome_completo if ordem_servico.ocorrencia.perito_atribuido else 'o perito'
            return Response(
                {
                    'error': 'Esta Ordem de Servi√ßo n√£o possui registro de ci√™ncia.',
                    'details': f'O sistema n√£o identificou que {perito_nome} tomou ci√™ncia desta ordem.',
                    'action': f'Entre em contato com {perito_nome} para que ele tome ci√™ncia antes de voc√™ dar baixa.',
                    'context': {
                        'os_numero': ordem_servico.numero_os,
                        'perito': perito_nome
                    }
                },
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # ‚úÖ CONCLUI A OS (o m√©todo concluir() no model agora salva o concluida_por)
        ordem_servico.concluir(user=request.user)
        
        # ‚úÖ RETORNA SUCESSO COM STATUS 200
        serializer = self.get_serializer(ordem_servico)
        return Response(
            {
                'message': f'OS {ordem_servico.numero_os} conclu√≠da com sucesso!',
                'ordem_servico': serializer.data
            },
            status=status.HTTP_200_OK
        )

    # =========================================================================
    # LIXEIRA E RESTAURA√á√ÉO
    # =========================================================================

    @action(detail=False, methods=['get'])
    def lixeira(self, request, **kwargs):
        """Lista as OS deletadas (soft delete)"""
        queryset = self.get_queryset()
        serializer = self.get_serializer(queryset, many=True)
        return Response(serializer.data)

    @action(detail=True, methods=['post'])
    def restaurar(self, request, **kwargs):
        """Restaura uma OS da lixeira"""
        instance = self.get_object()
        
        if not instance.deleted_at:
            return Response(
                {'message': 'Esta OS n√£o est√° deletada.'},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        instance.restore()
        serializer = self.get_serializer(instance)
        
        return Response(
            {
                'message': f'OS {instance.numero_os} restaurada com sucesso.',
                'ordem_servico': serializer.data
            },
            status=status.HTTP_200_OK
        )

    # =========================================================================
    # GERA√á√ÉO DE PDFs
    # =========================================================================
    
    @action(detail=True, methods=['get'], url_path='pdf')
    def gerar_pdf(self, request, pk=None):
        """Gera PDF simples da OS"""
        ordem = self.get_object()
        
        # ‚úÖ CORRIGIDO: Administrativos veem tudo sempre
        if request.user.perfil in ['ADMINISTRATIVO', 'SUPER_ADMIN']:
            return gerar_pdf_ordem_servico(ordem, request)
        
        # Peritos precisam tomar ci√™ncia primeiro
        if ordem.ocultar_detalhes_ate_ciencia():
            return Response(
                {'error': 'Voc√™ precisa tomar ci√™ncia da OS antes de gerar o PDF.'},
                status=status.HTTP_403_FORBIDDEN
            )
        
        return gerar_pdf_ordem_servico(ordem, request)

    @action(detail=True, methods=['get'], url_path='pdf-oficial')
    def gerar_pdf_oficial(self, request, *args, **kwargs):
        """Gera PDF oficial da OS para impress√£o/assinatura"""
        ordem_servico = self.get_object()
        
        # ‚úÖ CORRIGIDO: Administrativos veem tudo sempre
        if request.user.perfil in ['ADMINISTRATIVO', 'SUPER_ADMIN']:
            return gerar_pdf_oficial_ordem_servico(ordem_servico, request)
        
        # Peritos precisam tomar ci√™ncia primeiro
        if ordem_servico.ocultar_detalhes_ate_ciencia():
            return Response(
                {'error': 'Voc√™ precisa tomar ci√™ncia da OS antes de gerar o PDF oficial.'},
                status=status.HTTP_403_FORBIDDEN
            )
        
        return gerar_pdf_oficial_ordem_servico(ordem_servico, request)

    @action(detail=False, methods=['get'], url_path='listagem-pdf')
    def gerar_listagem_pdf(self, request, *args, **kwargs):
        """Gera PDF com todas as OS de uma ocorr√™ncia"""
        ocorrencia_id = request.query_params.get('ocorrencia_id')
        
        if not ocorrencia_id:
            return Response(
                {"error": "Query param 'ocorrencia_id' √© obrigat√≥rio."},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        try:
            ocorrencia = Ocorrencia.objects.get(pk=ocorrencia_id)
        except Ocorrencia.DoesNotExist:
            return Response(
                {"error": "Ocorr√™ncia n√£o encontrada."},
                status=status.HTTP_404_NOT_FOUND
            )
        
        return gerar_pdf_listagem_ordens_servico(ocorrencia, request)
    
    @action(detail=False, methods=['get'], url_path='relatorios-gerenciais')
    def relatorios_gerenciais(self, request):
        """
        Retorna relat√≥rios gerenciais agregados sobre Ordens de Servi√ßo.
        """
        
        # Preparar filtros base
        filtros = Q(deleted_at__isnull=True)
        
        # Filtro de data
        data_inicio = request.query_params.get('data_inicio')
        data_fim = request.query_params.get('data_fim')
        
        if data_inicio:
            filtros &= Q(created_at__date__gte=data_inicio)
        if data_fim:
            filtros &= Q(created_at__date__lte=data_fim)
        
        # Filtro de perito
        perito_id = request.query_params.get('perito_id')
        if perito_id:
            filtros &= Q(ocorrencia__perito_atribuido_id=perito_id)
        
        # Filtro de unidade
        unidade_id = request.query_params.get('unidade_id')
        if unidade_id:
            filtros &= Q(unidade_demandante_id=unidade_id)
        
        # Filtro de servi√ßo
        servico_id = request.query_params.get('servico_id')
        if servico_id:
            filtros &= Q(ocorrencia__servico_pericial_id=servico_id)
        
        # Filtro de status
        status_param = request.query_params.get('status')
        if status_param:
            filtros &= Q(status=status_param)
        
        # QuerySet base
        qs = OrdemServico.objects.filter(filtros)
        
        # ‚úÖ CORRE√á√ÉO: Adicionar data atual para verificar vencimentos
        data_atual = timezone.now().date()
        
        # 1. RESUMO GERAL - ‚úÖ CORRIGIDO
        resumo_geral = {
            'total_emitidas': qs.count(),
            'aguardando_ciencia': qs.filter(status='AGUARDANDO_CIENCIA').count(),
            'abertas': qs.filter(status='ABERTA').count(),
            'em_andamento': qs.filter(status='EM_ANDAMENTO').count(),
            'vencidas': qs.filter(
                Q(status__in=['AGUARDANDO_CIENCIA', 'ABERTA', 'EM_ANDAMENTO']) &
                Q(data_prazo__lt=data_atual)
            ).count(),
            'concluidas': qs.filter(status='CONCLUIDA').count(),
        }
        
        # 2. PRODU√á√ÉO POR PERITO - ‚úÖ CORRIGIDO
        producao_por_perito = qs.values(
            'ocorrencia__perito_atribuido__nome_completo'
        ).annotate(
            total_emitidas=Count('id'),
            concluidas=Count('id', filter=Q(status='CONCLUIDA')),
            em_andamento=Count('id', filter=Q(status='EM_ANDAMENTO')),
            vencidas=Count('id', filter=Q(
                status__in=['AGUARDANDO_CIENCIA', 'ABERTA', 'EM_ANDAMENTO'],
                data_prazo__lt=data_atual
            )),
            aguardando_ciencia=Count('id', filter=Q(status='AGUARDANDO_CIENCIA')),
        ).order_by('-total_emitidas')
        
        producao_detalhada = []
        for perito in producao_por_perito:
            perito_nome = perito['ocorrencia__perito_atribuido__nome_completo']
            
            os_concluidas = qs.filter(
                ocorrencia__perito_atribuido__nome_completo=perito_nome,
                status='CONCLUIDA'
            )
            
            cumpridas_no_prazo = 0
            cumpridas_com_atraso = 0
            
            for os in os_concluidas:
                if os.concluida_com_atraso:
                    cumpridas_com_atraso += 1
                else:
                    cumpridas_no_prazo += 1
            
            producao_detalhada.append({
                'perito': perito_nome or 'Sem perito',
                'total_emitidas': perito['total_emitidas'],
                'concluidas': perito['concluidas'],
                'cumpridas_no_prazo': cumpridas_no_prazo,
                'cumpridas_com_atraso': cumpridas_com_atraso,
                'em_andamento': perito['em_andamento'],
                'vencidas': perito['vencidas'],
                'aguardando_ciencia': perito['aguardando_ciencia'],
                'taxa_cumprimento_prazo': round(
                    (cumpridas_no_prazo / perito['concluidas'] * 100) if perito['concluidas'] > 0 else 0,
                    1
                )
            })
        
        # 3. POR UNIDADE DEMANDANTE - ‚úÖ CORRIGIDO
        por_unidade = qs.values(
            'unidade_demandante__nome'
        ).annotate(
            total=Count('id'),
            concluidas=Count('id', filter=Q(status='CONCLUIDA')),
            em_andamento=Count('id', filter=Q(status='EM_ANDAMENTO')),
            vencidas=Count('id', filter=Q(
                status__in=['AGUARDANDO_CIENCIA', 'ABERTA', 'EM_ANDAMENTO'],
                data_prazo__lt=data_atual
            ))
        ).order_by('-total')
        
        # 4. POR SERVI√áO PERICIAL - ‚úÖ CORRIGIDO
        por_servico = qs.values(
            'ocorrencia__servico_pericial__sigla',
            'ocorrencia__servico_pericial__nome'
        ).annotate(
            total=Count('id'),
            concluidas=Count('id', filter=Q(status='CONCLUIDA')),
            em_andamento=Count('id', filter=Q(status='EM_ANDAMENTO')),
            vencidas=Count('id', filter=Q(
                status__in=['AGUARDANDO_CIENCIA', 'ABERTA', 'EM_ANDAMENTO'],
                data_prazo__lt=data_atual
            ))
        ).order_by('-total')
        
        # 5. REITERA√á√ïES
        reiteracoes_stats = {
            'total_originais': qs.filter(numero_reiteracao=0).count(),
            'total_reiteracoes': qs.filter(numero_reiteracao__gt=0).count(),
            'primeira_reiteracao': qs.filter(numero_reiteracao=1).count(),
            'segunda_reiteracao': qs.filter(numero_reiteracao=2).count(),
            'terceira_ou_mais': qs.filter(numero_reiteracao__gte=3).count(),
        }
        
        # 6. TAXA DE CUMPRIMENTO
        os_concluidas_todas = qs.filter(status='CONCLUIDA')
        total_concluidas = os_concluidas_todas.count()
        
        cumpridas_prazo_total = 0
        cumpridas_atraso_total = 0
        
        for os in os_concluidas_todas:
            if os.concluida_com_atraso:
                cumpridas_atraso_total += 1
            else:
                cumpridas_prazo_total += 1
        
        taxa_cumprimento = {
            'total_concluidas': total_concluidas,
            'cumpridas_no_prazo': cumpridas_prazo_total,
            'cumpridas_com_atraso': cumpridas_atraso_total,
            'percentual_no_prazo': round(
                (cumpridas_prazo_total / total_concluidas * 100) if total_concluidas > 0 else 0,
                1
            ),
            'percentual_com_atraso': round(
                (cumpridas_atraso_total / total_concluidas * 100) if total_concluidas > 0 else 0,
                1
            )
        }
        
        # 7. PRAZOS M√âDIOS
        os_com_conclusao = qs.filter(
            status='CONCLUIDA',
            data_ciencia__isnull=False,
            data_conclusao__isnull=False
        )
        
        if os_com_conclusao.exists():
            tempo_medio = os_com_conclusao.annotate(
                dias_para_concluir=ExpressionWrapper(
                    F('data_conclusao') - F('data_ciencia'),
                    output_field=fields.DurationField()
                )
            ).aggregate(
                media=Avg('dias_para_concluir')
            )
            
            if tempo_medio['media']:
                dias_medio = tempo_medio['media'].days
            else:
                dias_medio = 0
        else:
            dias_medio = 0
        
        prazos_stats = {
            'tempo_medio_conclusao_dias': dias_medio,
            'prazo_medio_concedido': round(qs.aggregate(Avg('prazo_dias'))['prazo_dias__avg'] or 0, 1)
        }
        
        # 8. EVOLU√á√ÉO TEMPORAL
        doze_meses_atras = timezone.now() - timedelta(days=365)
        evolucao_temporal = qs.filter(
            created_at__gte=doze_meses_atras
        ).annotate(
            mes=TruncDate('created_at')
        ).values('mes').annotate(
            total=Count('id'),
            concluidas=Count('id', filter=Q(status='CONCLUIDA'))
        ).order_by('mes')
        
        # RESPOSTA
        return Response({
            'resumo_geral': resumo_geral,
            'producao_por_perito': producao_detalhada,
            'por_unidade_demandante': list(por_unidade),
            'por_servico_pericial': list(por_servico),
            'reiteracoes': reiteracoes_stats,
            'taxa_cumprimento': taxa_cumprimento,
            'prazos': prazos_stats,
            'evolucao_temporal': list(evolucao_temporal)
        })
        
    @action(detail=False, methods=['get'], url_path='relatorios-gerenciais-pdf')
    def relatorios_gerenciais_pdf(self, request):
        """Gera PDF dos relat√≥rios gerenciais"""
        from .pdf_generator import gerar_pdf_relatorios_gerenciais
        
        # Obter dados do relat√≥rio
        response_data = self.relatorios_gerenciais(request)
        dados = response_data.data
        
        # Preparar informa√ß√µes de filtros
        filtros_aplicados = {}
        if request.query_params.get('data_inicio'):
            filtros_aplicados['data_inicio'] = request.query_params.get('data_inicio')
        if request.query_params.get('data_fim'):
            filtros_aplicados['data_fim'] = request.query_params.get('data_fim')
        # Adicionar outros filtros conforme necess√°rio
        
        return gerar_pdf_relatorios_gerenciais(dados, filtros_aplicados)