# movimentacoes/serializers.py

from rest_framework import serializers
from django.contrib.auth import authenticate
from .models import Movimentacao
from usuarios.serializers import UserNestedSerializer


class MovimentacaoSerializer(serializers.ModelSerializer):
    """
    Serializer para EXIBIR os detalhes de uma movimenta√ß√£o.
    """
    created_by = UserNestedSerializer(read_only=True)
    updated_by = UserNestedSerializer(read_only=True)

    class Meta:
        model = Movimentacao
        fields = [
            'id', 'ocorrencia', 'assunto', 'descricao',
            'ip_registro', 'created_at', 'updated_at',
            'created_by', 'updated_by',
        ]
        read_only_fields = fields


class CriarMovimentacaoSerializer(serializers.Serializer):
    """
    Serializer de A√á√ÉO para registrar uma nova movimenta√ß√£o com assinatura,
    seguindo o padr√£o j√° existente no app de ocorr√™ncias.
    """
    assunto = serializers.CharField(max_length=255, label="Assunto")
    descricao = serializers.CharField(style={'base_template': 'textarea.html'}, label="Descri√ß√£o")
    
    # Campos de assinatura (id√™nticos ao ReabrirOcorrenciaSerializer)
    username = serializers.CharField(
        max_length=150,
        label="Email de Confirma√ß√£o",
        help_text="Confirme seu email de login para assinar a movimenta√ß√£o."
    )
    password = serializers.CharField(
        write_only=True,
        required=True,
        style={'input_type': 'password'},
        label="Senha de Confirma√ß√£o"
    )

    def validate(self, attrs):
        request = self.context.get('request')
        user = request.user
        username_input = attrs.get('username')
        password = attrs.get('password')
        
        print(f"üîç DEBUG - Validando movimenta√ß√£o")
        print(f"üë§ Usu√°rio logado: {user.nome_completo} (ID: {user.id})")
        
        # ====== VALIDA√á√ÉO DE PERMISS√ÉO DE EDI√á√ÉO ======
        movimentacao = self.context.get('movimentacao')
        print(f"üìù Movimenta√ß√£o no contexto: {movimentacao}")
        
        if movimentacao:  # Se est√° editando
            print(f"‚úèÔ∏è MODO EDI√á√ÉO DETECTADO!")
            print(f"üë§ Criado por: {movimentacao.created_by.nome_completo if movimentacao.created_by else 'Ningu√©m'} (ID: {movimentacao.created_by.id if movimentacao.created_by else 'N/A'})")
            print(f"üîê √â super admin? {user.is_superuser}")
            
            # Super Admin pode editar qualquer movimenta√ß√£o
            if not user.is_superuser:
                # Outros usu√°rios s√≥ podem editar suas pr√≥prias movimenta√ß√µes
                if movimentacao.created_by and movimentacao.created_by.id != user.id:
                    print(f"‚ùå BLOQUEANDO EDI√á√ÉO!")
                    raise serializers.ValidationError({
                        'non_field_errors': [
                            f'Voc√™ n√£o pode editar uma movimenta√ß√£o criada por {movimentacao.created_by.nome_completo}. '
                            'Apenas o autor original ou um Super Administrador pode edit√°-la.'
                        ]
                    })
                else:
                    print(f"‚úÖ Permitindo edi√ß√£o (√© o autor)")
            else:
                print(f"‚úÖ Permitindo edi√ß√£o (√© super admin)")
        else:
            print(f"‚ûï MODO CRIA√á√ÉO - sem valida√ß√£o de autor")
        # =============================================
        
        # Valida o email
        if username_input != user.email:
            print(f"‚ùå Email incorreto!")
            raise serializers.ValidationError({
                'username': 'O email de confirma√ß√£o deve ser o mesmo do seu email de login.'
            })
        
        # Valida a senha
        authenticated_user = authenticate(
            request=request,
            email=username_input,
            password=password
        )
        if not authenticated_user or authenticated_user.id != user.id:
            print(f"‚ùå Senha incorreta!")
            raise serializers.ValidationError({
                'password': 'Senha incorreta.'
            })
        
        print(f"‚úÖ Valida√ß√£o completa - PASSOU!")
        return attrs

    def create(self, validated_data):
        ocorrencia = self.context['ocorrencia']
        request = self.context['request']
        user = request.user
        
        # Remove os campos de assinatura que n√£o s√£o do modelo
        validated_data.pop('username')
        validated_data.pop('password')
        
        ip_address = request.META.get('REMOTE_ADDR', '127.0.0.1')

        movimentacao = Movimentacao.objects.create(
            ocorrencia=ocorrencia,
            created_by=user,
            ip_registro=ip_address,
            **validated_data
        )
        return movimentacao